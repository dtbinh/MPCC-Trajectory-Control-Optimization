clear;
clc;

%% system
T = 0.05; % sampling time for 20Hz
m = 0.4; % mass
nx = 12; % 4d position (angle around z-axis) and up to 4th derivatives
nalx = 3; % arc length and up to 4th derivatives
nu = 4; % force acting on the acceleration states
nalu = 1; % arc acceleration (virtual input)
g = -9.8; % gravitational acceleration

% continuous state space matrices
% dot.X = Ac*X + Bc*U
% dot.X = [vx; vy; vz; wyaw; ax; ay; az; ayaw]
% X = [x; y; z; yaw; vx; vy; vz; wyaw]
% U = [Fx; Fy; Fz; Tyaw]
Ac = zeros(nx+nalx,nx+nalx);
Ac(1,5) = 1;
Ac(2,6) = 1;
Ac(3,7) = 1;
Ac(4,8) = 1;

Ac(13,14) = 1;
% Ac(21,22) = 1;

Bc = zeros(nx+nalx,nu+nalu);
Bc(5,1) = 1/m;
Bc(6,2) = 1/m;
Bc(7,3) = 1/m;
Bc(8,4) = 1/m;

Bc(14,5) = 1;
% Bc(22,5) = 1;

gc = zeros(nx+nalx,1);
gc(7,1) = g;

I = eye(nx+nalx);

% discretization
A_tilde = [Ac, Bc, I; zeros(nx + nalx + nu + nalu, nx + nalx + nu + nalu + nx + nalx)]; 
A_tilde_d = expm(A_tilde*T);

Ad = A_tilde_d(1:nx+nalx,1:nx+nalx);
Bd = A_tilde_d(1:nx+nalx,nx+nalx+1:nx+nalx+nu+nalu);
gd = A_tilde_d(1:nx+nalx,nx+nalx+nu+nalu+1:2*(nx+nalx)+nu+nalu) * gc;

% % finite differentiation
% % a(i+1) = v(i+1) - v(i)
% Ad(9,9) = 0;
% Ad(10,10) = 0;
% Ad(11,11) = 0;
% Ad(12,12) = 0;
% Ad(9,5) = -1/T;
% Ad(10,6) = -1/T;
% Ad(11,7) = -1/T;
% Ad(12,8) = -1/T;
% 
% % j(i+1) = a(i+1) - a(i)
% Ad(13,13) = 0;
% Ad(14,14) = 0;
% Ad(15,15) = 0;
% Ad(16,16) = 0;
% Ad(13,9) = -1/T;
% Ad(14,10) = -1/T;
% Ad(15,11) = -1/T;
% Ad(16,12) = -1/T;
% 
% % s(i+1) = j(i+1) - j(i)
% Ad(17,17) = 0;
% Ad(18,18) = 0;
% Ad(19,19) = 0;
% Ad(20,20) = 0;
% Ad(17,13) = -1/T;
% Ad(18,14) = -1/T;
% Ad(19,15) = -1/T;
% Ad(20,16) = -1/T;
% 
% % theta''(i+1) = theta'(i+1) - theta'(i)
% Ad(23,23) = 0;
% Ad(23,22) = -1/T;
% 
% % theta'''(i+1) = theta''(i+1) - theta''(i)
% Ad(24,24) = 0;
% Ad(24,23) = -1/T;
% 
% % theta''''(i+1) = theta'''(i+1) - theta'''(i)
% Ad(25,25) = 0;
% Ad(25,24) = -1/T;

% change in acceleration (input)
% j(i+1) = a(i+1) - a(i)
Ad(9,9) = 0;
Ad(10,10) = 0;
Ad(11,11) = 0;
Ad(12,12) = 0;
Bd(9,1) = -1/(T*m);
Bd(10,2) = -1/(T*m);
Bd(11,3) = -1/(T*m);
Bd(12,4) = -1/(T*m);

% % s(i+1) = j(i+1) - j(i)
% Ad(13,13) = 0;
% Ad(14,14) = 0;
% Ad(15,15) = 0;
% Ad(16,16) = 0;
% Ad(13,9) = -1/T;
% Ad(14,10) = -1/T;
% Ad(15,11) = -1/T;
% Ad(16,12) = -1/T;

% theta'''(i+1) = theta''(i+1) - theta''(i)
Ad(15,15) = 0;
Bd(15,5) = -1/T;

% % theta''''(i+1) = theta'''(i+1) - theta'''(i)
% Ad(20,20) = 0;
% Ad(20,19) = -1/T;

%% MPCC setup
% for constant Q and P matrices
contourpenalty = 1000; 
lagpenalty = 1000; 
zpenalty = 1000; 
dthetapenalty = 0.1;
fd_factor = 0.01;
% Qp = [contourpenalty, 0, 0; 0, lagpenalty, 0; 0, 0, zpenalty];
% Qp = [contourpenalty, 0; 0, lagpenalty];
Qlag = 1000;
Qcontour = 1000;
Qj = fd_factor*eye(4);
Qdtheta = dthetapenalty; 
Qjtheta = fd_factor*eye(1);
% Pp = [contourpenalty, 0, 0; 0, lagpenalty, 0; 0, 0, zpenalty];
% Pp = [contourpenalty, 0; 0, lagpenalty];
Plag = 1000;
Pcontour = 1000;
Pj = fd_factor*eye(4);
Pdtheta = dthetapenalty; 
Pjtheta = fd_factor*eye(1);
% boundaries
umin = [-4, -4, 0, -4, 0];    umax = [4, 4, 10, 4, 10]; % u limits based on drones max force
xmin = -inf*ones(1,nx+nalx);    xmax = inf*ones(1,nx+nalx); % no boundaries in space

%% reference trajectory
kmax = 320; % 8s trajectory for 20Hz
theta = 0:0.05:0.05*kmax;
dot_theta = zeros(1,kmax+1);
% x = cos(theta);
% y = sin(theta);
% z = zeros(1,kmax+1);
% z = theta;
% phi = @(pg) atan2(cos(pg),-sin(pg));
% yaw = phi(theta);
xtarget = [0, 1, 1, 0, 0];
ytarget = [0, 0, 1, 1, 0];
ztarget = [0, 0.25, 0.5, 0.75, 1];
% xtarget = [0, 1, 1, 0, 0, 1];
% ytarget = [0, 0, 1, 1, 0, 0];
% ztarget = [0, 0.5, 1, 0.5, 0, 0.5];
thetatarget = linspace(theta(1), theta(end), length(xtarget));
% thetatarget = cumsum(sqrt([0,diff(xtarget)].^2 + [0,diff(ytarget)].^2 + [0,diff(ztarget)].^2));
xpp = spline(thetatarget,xtarget);
ypp = spline(thetatarget,ytarget);
zpp = spline(thetatarget,ztarget);
xppdot = fnder(xpp);
yppdot = fnder(ypp);
zppdot = fnder(zpp);
x = ppval(xpp,theta);
y = ppval(ypp,theta);
z = ppval(zpp,theta);
phi = @(pg) atan2(ppval(yppdot,pg),ppval(xppdot,pg));
yaw = phi(theta);
Xref = [x; y; z; yaw; theta; dot_theta];

polyorder = 2;

%% FORCES multistage form
% assume variable ordering zi = [ui; xi] for i=1...N

% dimensions
model.N     = 11;    % horizon length
model.nvar  = nx+nalx+nu+nalu;    % number of variables
model.neq   = nx+nalx;    % number of equality constraints
model.npar  = 3*(polyorder+1)+3*(polyorder); % number of runtime parameters

% objective 
for i = 1:model.N-1
%     model.objective{i} = @(z) [sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%         cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%         -cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%         sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%         z(nu+nalu+3)]'*Qp* ...
%         [sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%         cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%         -cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%         sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%         z(nu+nalu+3)] - Qdtheta*(z(nu+nalu+nx+2)) + ...
%         (z(nu+nalu+9:nu+nalu+nx))'*Qj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%         (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Qjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));

%     model.objective{i} = @(z,par) ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         z(nu+nalu+3) - polyval(par(7:9)',z(nu+nalu+nx+1))]'*Qp* ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         z(nu+nalu+3) - polyval(par(7:9)',z(nu+nalu+nx+1))] - Qdtheta*(z(nu+nalu+nx+2)) + ...
%         (z(nu+nalu+9:nu+nalu+nx))'*Qj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%         (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Qjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));

%     model.objective{i} = @(z,par) ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1)))]'*Qp* ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1)))] - Qdtheta*(z(nu+nalu+nx+2)) + ...
%         (z(nu+nalu+9:nu+nalu+nx))'*Qj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%         (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Qjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx)) + ...
%             [sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1)))]'*Qp* ...
%         [sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1)))];

    model.objective{i} = @(z,par) ...
        [z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
        z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
        z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
        [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)]*Qlag* ...
        [z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
        z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
        z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
        [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)] + ...
        sqrt((z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)))^2 + ...
        (z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)))^2 + (z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1)))^2 - ...
        ([z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
        z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
        z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
        [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)])^2)*Qcontour* ...
        sqrt((z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)))^2 + ...
        (z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)))^2 + (z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1)))^2 - ...
        ([z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
        z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
        z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
        [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
        polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)])^2) - ...
        Qdtheta*(z(nu+nalu+nx+2)) + ...
        (z(nu+nalu+9:nu+nalu+nx))'*Qj*(z(nu+nalu+9:nu+nalu+nx)) + ...
        (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Qjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));
end
% model.objective{model.N} = @(z) [sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%     cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%     -cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%     sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%     z(nu+nalu+3)]'*Pp* ...
%     [sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%     cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%     -cos(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+1)-cos(z(nu+nalu+nx+1))) - ...
%     sin(phi(z(nu+nalu+nx+1)))*(z(nu+nalu+2)-sin(z(nu+nalu+nx+1))); ...
%     z(nu+nalu+3)] - Pdtheta*(z(nu+nalu+nx+2)) + ...
%     (z(nu+nalu+9:nu+nalu+nx))'*Pj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%     (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Pjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));

% model.objective{model.N} = @(z,par) ...
%     [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%     cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%     -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%     sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%     z(nu+nalu+3) - polyval(par(7:9)',z(nu+nalu+nx+1))]'*Pp* ...
%     [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%     cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%     -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%     sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%     *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%     z(nu+nalu+3) - polyval(par(7:9)',z(nu+nalu+nx+1))] - Pdtheta*(z(nu+nalu+nx+2)) + ...
%     (z(nu+nalu+9:nu+nalu+nx))'*Pj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%     (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Pjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));

% model.objective{model.N} = @(z,par) ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1)))]'*Pp* ...
%         [sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+1)-polyval(par(1:3)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(12:13)',z(nu+nalu+nx+1)),polyval(par(10:11)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1)))] - Pdtheta*(z(nu+nalu+nx+2)) + ...
%         (z(nu+nalu+9:nu+nalu+nx))'*Pj*(z(nu+nalu+9:nu+nalu+nx)) + ...
%         (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Pjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx)) + ...
%             [sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1)))]'*Pp* ...
%         [sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1))); ...
%         -cos(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+2)-polyval(par(4:6)',z(nu+nalu+nx+1))) - ...
%         sin(atan2(polyval(par(14:15)',z(nu+nalu+nx+1)),polyval(par(12:13)',z(nu+nalu+nx+1)))) ...
%         *(z(nu+nalu+3)-polyval(par(7:9)',z(nu+nalu+nx+1)))];

model.objective{model.N} = @(z,par) ...
    [z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
    z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
    z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
    [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)]*Plag* ...
    [z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
    z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
    z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
    [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)] + ...
    sqrt((z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)))^2 + ...
    (z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)))^2 + (z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1)))^2 - ...
    ([z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
    z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
    z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
    [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)])^2)*Pcontour* ...
    sqrt((z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)))^2 + ...
    (z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)))^2 + (z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1)))^2 - ...
    ([z(nu+nalu+1) - polyval(par(1:3),z(nu+nalu+nx+1)); ...
    z(nu+nalu+2) - polyval(par(4:6),z(nu+nalu+nx+1)); ...
    z(nu+nalu+3) - polyval(par(7:9),z(nu+nalu+nx+1))]'* ...
    [polyval(par(10:11),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(12:13),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2); ...
    polyval(par(14:15),z(nu+nalu+nx+1))/sqrt(polyval(par(10:11),z(nu+nalu+nx+1))^2+polyval(par(12:13),z(nu+nalu+nx+1))^2+polyval(par(14:15),z(nu+nalu+nx+1))^2)])^2) - ...
    Pdtheta*(z(nu+nalu+nx+2)) + ...
    (z(nu+nalu+9:nu+nalu+nx))'*Pj*(z(nu+nalu+9:nu+nalu+nx)) + ...
    (z(nu+nalu+nx+3:nu+nalu+nx+nalx))'*Pjtheta*(z(nu+nalu+nx+3:nu+nalu+nx+nalx));
    
% equalities
model.eq = @(z) Ad*z(nu+nalu+1:nu+nalu+nx+nalx) + Bd*z(1:nu+nalu) + gd;

% model.E = [zeros(nx+nalx,nu+nalu), eye(nx+nalx)];
% model.E = [zeros(nx+nalx,nu+nalu), ...
%     eye(nx+nalx) + diag([zeros(4,1); (-1/T)*ones(nx-8,1); zeros(nalx,1)], -4) + ...
%     diag([zeros(nx+1,1); (-1/T)*ones(nalx-2,1)], -1)];
model.E = [[zeros(nx-4,nu+nalu); (-1/(T*m))*[eye(4), zeros(4,1)]; (-1/T)*[zeros(3,4), [0;0;1]]], eye(nx+nalx)];
% model.E = [[zeros(nx-8,nu+nalu); (-1/(T*m))*[eye(4), zeros(4,1)]; zeros(4,5); ...
%     (-1/(T*m))*[zeros(4), [0;0;1;0]]], eye(nx+nalx) + diag([zeros(8,1); (-1/T)*ones(nx-12,1); zeros(nalx,1)], -4) + ...
%     diag([zeros(nx+2,1); (-1/T)*ones(nalx-3,1)], -1)];

% initial state
model.xinitidx = nu+nalu+1:nu+nalu+nx+nalx;

% inequalities
model.lb = [ umin,    xmin  ];
model.ub = [ umax,    xmax  ];

%% Generate FORCES solver

% get options
codeoptions = getOptions('FORCESNLPsolver');
codeoptions.printlevel = 2;
codeoptions.maxit = 1000;

% generate code
FORCES_NLP(model, codeoptions);

%% simulate

X = zeros(nx+nalx,1);
% X(1:3,1) = [1;1;1];
U = zeros(nu+nalu,1);
problem.x0 = zeros(model.N*model.nvar,1); % stack up problems into one N stages array
k = 1;
[~, nrid(k)] = min(pdist2(X(1:3,k)', Xref(1:3,:)'));
searchlength = 40;
fitlength = 20;
figure;

while (nrid(k) ~= kmax+1)
    tic
    problem.xinit = X(:,k);
    
    % locally fit quadratic splines
    if (nrid(k) >= kmax-fitlength)
        fitrange = nrid(k)-fitlength:kmax+1;
    else
        fitrange = nrid(k):nrid(k)+fitlength;
    end
%     fitrange = nrid(k):nrid(k)+fitlength; % inifinity loop (hack)
    px = polyfit(theta(fitrange),x(fitrange),polyorder);
    py = polyfit(theta(fitrange),y(fitrange),polyorder);
    pz = polyfit(theta(fitrange),z(fitrange),polyorder);
    dpx = polyder(px);
    dpy = polyder(py);
    dpz = polyder(pz);
    if (length(dpx) ~= polyorder)
        if (find(px == 0) == 1)
            dpx(2) = dpx(1);
            dpx(1) = 0;
        else
            dpx(2) = 0;
        end
    end
    if (length(dpy) ~= polyorder)
        if (find(py == 0) == 1)
            dpy(2) = dpy(1);
            dpy(1) = 0;
        else
            dpy(2) = 0;
        end
    end
    if (length(dpz) ~= polyorder)
        if (find(pz == 0) == 1)
            dpz(2) = dpz(1);
            dpz(1) = 0;
        else
            dpz(2) = 0;
        end
    end
    qs = [px'; py'; pz'; dpx'; dpy'; dpz'];
    
    problem.all_parameters = repmat(qs, model.N, 1);
    
    [solverout,exitflag,info] = FORCESNLPsolver(problem);

    if( exitflag == 1 )
        U(:,k) = solverout.x01(1:nu+nalu);
        solvetime(k) = info.solvetime;
        iters(k) = info.it;
    else
        error('Some problem in solver');
    end
    
    X(:,k+1) = model.eq( [U(:,k); X(:,k)] )';
    
    % mpc output
    Xout = zeros(nx+nalx,model.N);
    Uout = zeros(nu+nalu,model.N-1);
    names = fieldnames(solverout);
    for j = 1:model.N
        tempout = getfield(solverout, names{j});
        Xout(:,j) = tempout(nu+nalu+1:nu+nalu+nx+nalx);
        if (j < model.N)
            Uout(:,j) = tempout(1:nu+nalu);
        end
    end
    
    % real-time plot
    clf;
    axis([-1.5 1.5 -1.5 1.5 -0.1 1.1]);
    hold on;
    plot3(Xref(1,:),Xref(2,:),Xref(3,:),'--');
    plot3(X(1,k),X(2,k),X(3,k),'or');
    plot3(Xout(1,:),Xout(2,:),Xout(3,:),'.m');
    plot3(polyval(px,theta(fitrange)),polyval(py,theta(fitrange)),polyval(pz,theta(fitrange)),'LineWidth',2);
    drawnow;
    hold off;
    
    % search nearest reference point for the next time step
%     [~, nrid(k+1)] = min(pdist2(X(1:3,k+1)', Xref(1:3,:)')); % search through the whole trajectory
    if (nrid(k) >= kmax-searchlength)
        [~, nrid(k+1)] = min(pdist2(X(1:3,k+1)', Xref(1:3,nrid(k):kmax+1)'));
    else
        [~, nrid(k+1)] = min(pdist2(X(1:3,k+1)', Xref(1:3,nrid(k):nrid(k)+searchlength)'));
    end % search only in a smaller search range around the previous nearest reference point
    nrid(k+1) = nrid(k+1) + nrid(k) - 1; % non-reversal path
%     if (nrid(k) >= 257)
%         [~, nrid(k+1)] = min(pdist2(X(1:3,k+1)', Xref(1:3,1:100)'));
% %         X(13,k+1) = Xref(5,nrid(k+1));
%         X(13,k+1) = X(13,k+1) - 12.8;
%     else
%         [~, nrid(k+1)] = min(pdist2(X(1:3,k+1)', Xref(1:3,nrid(k):nrid(k)+searchlength)'));
%         nrid(k+1) = nrid(k+1) + nrid(k) - 1;
%     end  % infinity loop (hack)
    timeElapsed(k) = toc;
    k = k + 1;
end

%% plot

% s = 0:(1/(size(X,2)-1))*0.05*kmax:0.05*kmax;
s = X(13,:);

figure;
subplot(3,1,1);
plot(s,ppval(xpp,s),'--r',s,ppval(ypp,s),'--g',s,ppval(zpp,s),'--b');
hold on;
plot(s,X(1,:),'r',s,X(2,:),'g',s,X(3,:),'b');
hold off;
title('Position Plot');
legend('xref','yref','zref','x','y','z');

subplot(3,1,2);
plot(s,ppval(xppdot,s),'--m',s,ppval(yppdot,s),'--c',s,ppval(zppdot,s),'--k');
hold on;
plot(s,X(5,:),'m',s,X(6,:),'c',s,X(7,:),'k');
hold off;
title('Velocity Plot');
legend('vxref','vyref','vzref','vx','vy','vz');

subplot(3,1,3);
haha = s(2:end);
plot(haha,U(1,:),'r',haha,U(2,:),'g',haha,U(3,:),'b');
title('Input Plot');
legend('Fx','Fy','Fz');
